# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
# ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 1

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# shellcheck disable=SC2034
plugins=(
  git
  mise
  starship
)

source "$ZSH"/oh-my-zsh.sh

# Initialize atuin for magical shell history
if command -v atuin >/dev/null 2>&1; then
    eval "$(atuin init zsh)"
fi

# User configuration

# Add custom functions and completions directories to fpath and enable autoloading
fpath=(
  "$XDG_CONFIG_HOME/zsh/functions"
  "$XDG_CONFIG_HOME/zsh/completions"
  "${fpath[@]}"
)
autoload -Uz c

# Enable Vi mode for command line editing
bindkey -v

# Helper function for creating aliases to preferred commands
function alias_preference {
  local name="$1"
  shift

  for cmd in "$@"; do
    if command -v "$cmd" &>/dev/null; then
      alias "$name"="$cmd"
      break
    fi
  done
}

# Create aliases to enhanced alternatives
alias_preference cat bat
alias_preference df duf
alias_preference dircolors gdircolors
alias_preference du dust
alias_preference git hub
alias_preference ls eza gls
alias_preference make colormake
alias_preference top htop
alias_preference vi nvim vim
alias_preference vim nvim

unset -f alias_preference

# Enhanced eza aliases with icons
if command -v eza &>/dev/null; then
  alias eza='eza --icons=always --group-directories-first'
  alias ll='eza --icons=always --long --group-directories-first'
  alias la='eza --icons=always --long --all --group-directories-first'
  alias tree='eza --icons=always --tree'
fi

# Aliases for colorized commands
alias grep='grep -Hn --color=auto'

# Suffix aliases - automatically open files by extension
alias -s md="glow --pager"

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Reload shell function - re-execs the exact same zsh binary
function reload! {
    # Find the actual zsh binary path using multiple fallback methods
    local zsh_path
    
    # Method 1: Linux - /proc/$$/exe symlinks to the actual executable
    if [[ -r /proc/$$/exe ]]; then
        zsh_path=$(readlink /proc/$$/exe)
    
    # Method 2: macOS/BSD - Use lsof to find the binary from open file descriptors
    # This works because the shell binary stays open as the executing process
    elif command -v lsof >/dev/null && zsh_path=$(lsof -p $$ -Fn | awk '/^n.*zsh$/{print substr($0,2); exit}'); then
        :  # zsh_path already set by command substitution
    
    # Method 3: Non-login shells - $0 contains the actual path when not a login shell
    # Login shells have $0 as "-zsh" but regular shells show the full path
    elif [[ $0 != -* ]]; then
        zsh_path=$0
    
    # Method 4: Login shell detection - If $0 starts with '-', we're in a login shell
    # Use getent/dscl to find the user's actual shell from the system database
    elif [[ $0 == -* ]]; then
        if command -v getent >/dev/null; then
            # Linux/Unix systems - query passwd database
            zsh_path=$(getent passwd "$USER" | cut -d: -f7)
        elif command -v dscl >/dev/null; then
            # macOS - query Directory Services
            zsh_path=$(dscl . -read "/Users/$USER" UserShell | awk '{print $2}')
        else
            # Fallback to $SHELL if system tools unavailable
            zsh_path=$SHELL
        fi
    
    # Method 5: Final fallback - Use $SHELL environment variable
    # This may not be the currently running shell but is the user's preferred shell
    else
        zsh_path=$SHELL
    fi
    
    exec "$zsh_path" "$@"
}
