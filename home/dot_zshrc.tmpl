# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="garyblessington"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 1

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Change cursor shape in vi mode between normal/insert
# VI_MODE_RESET_PROMPT_ON_MODE_CHANGE=true
VI_MODE_SET_CURSOR=true

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
# shellcheck disable=SC2034
plugins=(
  gh
  git
  mise
  starship
  vi-mode
)

source "$ZSH"/oh-my-zsh.sh

# Initialize atuin for magical shell history
{{- if lookPath "atuin" }}
eval "$(atuin init zsh)"
{{- end }}

{{- $zshAutoSuggestPath := joinPath .chezmoi.homeDir ".config/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh" }}
{{- if stat $zshAutoSuggestPath }}

# Speed-optimized zsh-autosuggestions loading
# All checks done at template generation time by chezmoi

# Pre-configure before loading for maximum speed
export ZSH_AUTOSUGGEST_USE_ASYNC=1
export ZSH_AUTOSUGGEST_MANUAL_REBIND=1  # We'll handle rebinding for vim mode
export ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
export ZSH_AUTOSUGGEST_HISTORY_IGNORE="?(#c50,)"  # Ignore commands > 50 chars
export ZSH_AUTOSUGGEST_COMPLETION_IGNORE="* --help"  # Skip help completions

# Catpuccin theme support - optimized for Ghostty + tmux
if [[ "${TERM}" == "xterm-ghostty" ]] || [[ -n "${TMUX}" ]]; then
    # Ghostty and tmux support proper color sequences
    export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=8'  # ANSI bright black adapts to theme
else
    # Fallback to neutral gray for other terminals
    export ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=244'
fi

# Load plugin
source {{ $zshAutoSuggestPath }}

# Custom vim mode integration
_zsh_autosuggest_bind_vim_mode() {
    # Clear default bindings
    bindkey -M viins '^[[C' forward-char  # Right arrow baseline
    bindkey -M viins '^[[D' backward-char # Left arrow baseline

    # Insert mode bindings
    bindkey -M viins '^F' vi-forward-word  # Ctrl+F: accept word
    bindkey -M viins '^E' vi-end-of-line   # Ctrl+E: accept to end
    bindkey -M viins '^]' autosuggest-accept  # Ctrl+]: accept full

    # Visual mode support
    bindkey -M vicmd '^]' autosuggest-accept
    bindkey -M visual '^]' autosuggest-accept

    # Quick accepts in normal mode
    bindkey -M vicmd 'L' vi-end-of-line
    bindkey -M vicmd 'A' vi-add-eol       # A should accept and go to end
}

# Apply vim bindings after plugin loads
_zsh_autosuggest_bind_vim_mode

# Speed hack: only fetch suggestions for commands > 2 chars
_zsh_autosuggest_should_fetch() {
    (( ${#BUFFER} > 2 ))
}

{{- end }}

# User configuration

# Add custom functions and completions directories to fpath and enable autoloading
fpath=(
  "$XDG_CONFIG_HOME/zsh/functions"
  "$XDG_CONFIG_HOME/zsh/completions"
  "${fpath[@]}"
)
autoload -Uz c

# Enable Vi mode for command line editing
bindkey -v

# Create aliases to enhanced alternatives
{{- if lookPath "bat" }}
alias cat='bat'
{{- end }}
{{- if lookPath "duf" }}
alias df='duf'
{{- end }}
{{- if lookPath "gdircolors" }}
alias dircolors='gdircolors'
{{- end }}
{{- if lookPath "dust" }}
alias du='dust'
{{- end }}
{{- if lookPath "hub" }}
alias git='hub'
{{- end }}
{{- if lookPath "eza" }}
alias ls='eza --icons=always --group-directories-first'
{{- else if lookPath "gls" }}
alias ls='gls'
{{- end }}
{{- if lookPath "colormake" }}
alias make='colormake'
{{- end }}
{{- if lookPath "htop" }}
alias top='htop'
{{- end }}
{{- if lookPath "nvim" }}
alias vi='nvim'
alias vim='nvim'
{{- else if lookPath "vim" }}
alias vi='vim'
{{- end }}


# Enhanced eza aliases with icons
{{- if lookPath "eza" }}
alias eza='eza --icons=always --group-directories-first'
alias ll='eza --icons=always --long --group-directories-first'
alias la='eza --icons=always --long --all --group-directories-first'
alias tree='eza --icons=always --tree'
{{- end }}

# Aliases for colorized commands
alias grep='grep -Hn --color=auto'

# Shadow codex command to auto-authenticate with 1Password
{{- if and (lookPath "op") (lookPath "codex") }}
alias codex='OPENAI_API_KEY=$(op read "op://Personal/openai-codex/credential") command codex'
{{- end }}

[ -f "$XDG_CONFIG_HOME/zsh/local.zsh" ] && source "$XDG_CONFIG_HOME/zsh/local.zsh"

# Shortcut to use claude with API credentials from 1Password instead of normal login
{{- if and (lookPath "op") (lookPath "claude") }}
alias claude-api='ANTHROPIC_API_KEY=$(op read "op://Personal/claude-code/credential") command claude'
{{- end }}

# Suffix aliases - automatically open files by extension
alias -s md="glow --pager"

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR="$(command -v vim)"
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# Reload shell function - re-execs the exact same zsh binary
function reload! {
    # Find the actual zsh binary path using multiple fallback methods
    local zsh_path

    # Method 1: Linux - /proc/$$/exe symlinks to the actual executable
    if [[ -r /proc/$$/exe ]]; then
        zsh_path=$(readlink /proc/$$/exe)

    # Method 2: macOS/BSD - Use lsof to find the binary from open file descriptors
    # This works because the shell binary stays open as the executing process
    elif command -v lsof >/dev/null && zsh_path=$(lsof -p $$ -Fn | awk '/^n.*zsh$/{print substr($0,2); exit}'); then
        :  # zsh_path already set by command substitution

    # Method 3: Non-login shells - $0 contains the actual path when not a login shell
    # Login shells have $0 as "-zsh" but regular shells show the full path
    elif [[ $0 != -* ]]; then
        zsh_path=$0

    # Method 4: Login shell detection - If $0 starts with '-', we're in a login shell
    # Use getent/dscl to find the user's actual shell from the system database
    elif [[ $0 == -* ]]; then
        if command -v getent >/dev/null; then
            # Linux/Unix systems - query passwd database
            zsh_path=$(getent passwd "$USER" | cut -d: -f7)
        elif command -v dscl >/dev/null; then
            # macOS - query Directory Services
            zsh_path=$(dscl . -read "/Users/$USER" UserShell | awk '{print $2}')
        else
            # Fallback to $SHELL if system tools unavailable
            zsh_path=$SHELL
        fi

    # Method 5: Final fallback - Use $SHELL environment variable
    # This may not be the currently running shell but is the user's preferred shell
    else
        zsh_path=$SHELL
    fi

    exec "$zsh_path" "$@"
}

{{- $zshSyntaxHighlightPath := joinPath .chezmoi.homeDir ".config/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh" }}
{{- if stat $zshSyntaxHighlightPath }}

# ============================================================================
# Zsh Syntax Highlighting - MUST BE LOADED LAST
# ============================================================================
# Speed-optimized configuration with compile-time checks

# Configure highlighters BEFORE loading the plugin
typeset -gA ZSH_HIGHLIGHT_HIGHLIGHTERS=(
    main 1
    brackets 1
    pattern 1
    cursor 0  # Disabled for performance
    root 0    # Disabled unless needed
)

# Performance optimization for large buffers
export ZSH_HIGHLIGHT_MAXLENGTH=20000

# Configure highlighting styles for catppuccin compatibility
typeset -gA ZSH_HIGHLIGHT_STYLES=(
    # Commands and builtins
    'builtin'                  'fg=blue'
    'command'                  'fg=green'
    'precommand'               'fg=green,underline'
    'alias'                    'fg=cyan'
    'function'                 'fg=cyan'

    # Paths
    'path'                     'fg=white,underline'
    'path_prefix'              'fg=white'
    'path_approx'              'fg=yellow'

    # Options and arguments
    'single-hyphen-option'     'fg=magenta'
    'double-hyphen-option'     'fg=magenta'

    # Quotes and globbing
    'single-quoted-argument'   'fg=yellow'
    'double-quoted-argument'   'fg=yellow'
    'dollar-quoted-argument'   'fg=yellow'
    'back-quoted-argument'     'fg=magenta'
    'globbing'                 'fg=cyan,bold'

    # Variables
    'assign'                   'fg=white'
    'parameter'                'fg=yellow'

    # Errors
    'unknown-token'            'fg=red,bold'
    'reserved-word'            'fg=magenta'
    'commandseparator'         'fg=white'

    # Brackets
    'bracket-level-1'          'fg=blue,bold'
    'bracket-level-2'          'fg=green,bold'
    'bracket-level-3'          'fg=magenta,bold'
    'bracket-level-4'          'fg=yellow,bold'
    'bracket-error'            'fg=red,bold'
)

# Custom patterns for common commands
typeset -gA ZSH_HIGHLIGHT_PATTERNS=(
    'rm -rf *'                 'fg=white,bold,bg=red'
    'sudo *'                   'fg=white,bold,bg=red'
)

# Load the plugin - MUST BE LAST
source {{ $zshSyntaxHighlightPath }}

# Ensure highlighting updates properly in vim modes
if [[ -n "$ZSH_HIGHLIGHT_VERSION" ]]; then
    # Force rehighlight on mode change
    function zle-keymap-select {
        zle && zle .reset-prompt && zle -R
    }

    # Ensure highlighting works in all vim modes
    zle -N zle-keymap-select
    zle -N zle-line-init
fi

{{- end }}

# Git-safe PATH modification - MUST RUN LAST
# Prepends .git/safe/../../bin to PATH for per-repository trusted binaries
# This allows each git repository to provide its own trusted executables
# Inspired by: https://thoughtbot.com/blog/git-safe
# Note: Placed at end to ensure it takes precedence over all other PATH modifications
export PATH=".git/safe/../../bin:$PATH"

# vi: ft=zsh
